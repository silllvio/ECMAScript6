{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","e","target","error","name","cursor","openCursor","negociacoes","ponteiro","result","registro","value","push","_data","_quantidade","_valor","continue","erro","clear"],"mappings":";;;;;;;;;;;;;;;AAASA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEIC,a;AAET,uCAAYC,UAAZ,EAAwB;AAAA;;AAEpB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AAEH;;;;wCAEGC,U,EAAY;AAAA;;AAEZ;AACA,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,MAAKP,MAFR,EAGTQ,GAHS,CAGLP,UAHK,CAAd;;AAKA;;;;;AAKAI,oCAAQI,SAAR,GAAoB;AAAA,uCAAKN,SAAL;AAAA,6BAApB;AACAE,oCAAQK,OAAR,GAAkB;AAAA,uCAAKN,OAAOO,EAAEC,MAAF,CAASC,KAAT,CAAeC,IAAtB,CAAL;AAAA,6BAAlB;;AAEA;AACA;AACA;AAEH,yBAnBM,CAAP;AAoBH;;;8CAES;AAAA;;AAEN,+BAAO,IAAIZ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIW,SAAS,OAAKhB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRgB,UAHQ,EAAb;;AAKA,gCAAIC,cAAc,EAAlB;;AAEAF,mCAAON,SAAP,GAAmB,aAAK;AACpB,oCAAIS,WAAWP,EAAEC,MAAF,CAASO,MAAxB;AACA,oCAAID,QAAJ,EAAc;AACV,wCAAIE,WAAWF,SAASG,KAAxB;AACAJ,gDAAYK,IAAZ,CAAiB,IAAI1B,UAAJ,CAAewB,SAASG,KAAxB,EAA+BH,SAASI,WAAxC,EAAqDJ,SAASK,MAA9D,CAAjB;AACAP,6CAASQ,QAAT;AACH,iCAJD,MAIO;AACHvB,4CAAQc,WAAR;AACH;AACJ,6BATD;AAUAF,mCAAOL,OAAP,GAAiB;AAAA,uCAAKC,EAAEC,MAAF,CAASe,IAAT,CAAcb,IAAnB;AAAA,6BAAjB;AACH,yBApBM,CAAP;AAqBH;;;8CAGQ;AAAA;;AACL,+BAAO,IAAIZ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGT4B,KAHS,EAAd;;AAKAvB,oCAAQI,SAAR,GAAoB;AAAA,uCAAKN,QAAQ,iCAAR,CAAL;AAAA,6BAApB;AACAE,oCAAQK,OAAR,GAAkB;AAAA,uCAAKN,OAAOO,EAAEC,MAAF,CAASC,KAAT,CAAeC,IAAtB,CAAL;AAAA,6BAAlB;AACH,yBARM,CAAP;AASH;;;;;;;;AAEJ;;AAED;AACA","file":"NegociacaoDao.js","sourcesContent":["import { Negociacao } from '../models/Negociacao';\r\n\r\nexport class NegociacaoDao {\r\n\r\n    constructor(connection) {\r\n\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n\r\n    };\r\n\r\n    add(negociacao) {\r\n\r\n        // Retorna a promise. Esse padrão é muito usado.\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .add(negociacao);\r\n\r\n            /*        let transaction = this._connection\r\n                        .transaction([this._store], 'readwrite')\r\n                        .abort();  //Esse método é nosso rollback.\r\n        */\r\n\r\n            request.onsuccess = e => resolve();\r\n            request.onerror = e => reject(e.target.error.name);\r\n\r\n            // let transaction = this._connection.transaction([this._store], 'readwrite');\r\n            // let store = transaction.objectStore(this._store);\r\n            // let request = store.add(negociacao);\r\n\r\n        });\r\n    };\r\n\r\n    findAll() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let cursor = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .openCursor();\r\n\r\n            let negociacoes = [];\r\n\r\n            cursor.onsuccess = e => {\r\n                let ponteiro = e.target.result;\r\n                if (ponteiro) {\r\n                    let registro = ponteiro.value;\r\n                    negociacoes.push(new Negociacao(registro._data, registro._quantidade, registro._valor));\r\n                    ponteiro.continue();\r\n                } else {\r\n                    resolve(negociacoes);\r\n                }\r\n            };\r\n            cursor.onerror = e => e.target.erro.name;\r\n        });\r\n    };\r\n\r\n\r\n    delete() {\r\n        return new Promise((resolve, reject) => {\r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .clear();\r\n\r\n            request.onsuccess = e => resolve('Negociações removidas certinho!');\r\n            request.onerror = e => reject(e.target.error.name);\r\n        });\r\n    };\r\n\r\n};\r\n\r\n// Para lidar também com o o IndexedDB outros desenvolvedores tornaram públicas suas bibliotecas. \r\n// Por exemplo, há o Dexie e o Db.js, este último utiliza promises assim como fizemos."]}