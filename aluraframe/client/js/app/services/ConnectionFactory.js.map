{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEsB;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC;AACA,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEA;AACAS,wCAAYI,eAAZ,GAA8B,aAAK;;AAE/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC,EAF+B,CAEmB;AAErD,6BAJD;;AAMA;AACA;AACAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB;AACA,oCAAI,CAAChB,UAAL,EAAiB;AACbA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;;AAEA;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR,CAJa,CAI8B;AAC3CA,+CAAWC,KAAX,GAAmB,YAAY;AAC3B,8CAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BAbD;;AAeA;AACAO,wCAAYW,OAAZ,GAAsB;AAAA,uCAAKZ,OAAOO,EAAEC,MAAF,CAASK,KAAT,CAAeC,IAAtB,CAAL;AAAA,6BAAtB;AACH,yBA/BM,CAAP;AAgCH;;;kDAEoBpB,U,EAAY;;AAE7B;AACA;AACAH,+BAAOwB,OAAP,CAAe,iBAAS;AACpB,gCAAIrB,WAAWsB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACIxB,WAAWyB,iBAAX,CAA6BD,KAA7B,EAFgB,CAEoB;;AAExCxB,uCAAW0B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AAEH,yBAND;AAQH;;;sDAEwB;AACrB,4BAAI3B,UAAJ,EAAgB;AACZ;AACA;AACAC,oCAHY,CAGH;AACTD,yCAAa,IAAb;AACH;AACJ;;;;;;;;AAEJ;;AAEG","file":"ConnectionFactory.js","sourcesContent":["\r\n// Criando variáveis státicas. Essas ainda não existem no ECMASricpt6.\r\nconst stores = ['negociacoes'];\r\nconst version = 7;\r\nconst dbName = 'aluraframe';\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n    constructor() {\r\n        throw new Error('Não é possível instanciar a classe ConnectionFactory');\r\n    }\r\n\r\n    static getConnection() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            // Abrindo a conexão com o banco.\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            // Criando uma conexão.\r\n            openRequest.onupgradeneeded = e => {\r\n\r\n                ConnectionFactory._createStores(e.target.result); // Cria a connection.\r\n\r\n            };\r\n\r\n            // Quando está tudo ok é quando recebemos a conexão para trabalhar.\r\n            // Devolvendo a variável da promise. Que é a própria conexão.\r\n            openRequest.onsuccess = e => {\r\n\r\n                // verifica se a se connection está nulo, se tiver cria uma conexão se não mantém a mesma.\r\n                if (!connection) {\r\n                    connection = e.target.result;\r\n\r\n                    //Monkey pating.\r\n                    close = connection.close.bind(connection); // Já criamos a associação na hora da cópia.\r\n                    connection.close = function () {\r\n                        throw new Error('você não pode fechar diretamente a conexão.');\r\n                    };\r\n                }\r\n                resolve(connection);\r\n            };\r\n\r\n            // Devolve a string do erro e não o objeto erro.\r\n            openRequest.onerror = e => reject(e.target.error.name);\r\n        });\r\n    };\r\n\r\n    static _createStores(connection) {\r\n\r\n        // varrendo todas as stores e limpado caso já existam.\r\n        // Dropa a objectStore caso ela já exista.\r\n        stores.forEach(store => {\r\n            if (connection.objectStoreNames.contains(store))\r\n                connection.deleteObjectStore(store);// não precisa do bloquinho de fechamento.\r\n\r\n            connection.createObjectStore(store, { autoIncrement: true });\r\n\r\n        });\r\n\r\n    };\r\n\r\n    static closeConnection() {\r\n        if (connection) {\r\n            // podemos usar a api de reflaction \r\n            // Reflect.apply(close,connection,[]);\r\n            close(); // O this desse close é a própria connectin por conta do bind que colocamos na hora da cópia.\r\n            connection = null;\r\n        }\r\n    }\r\n\r\n};\r\n\r\n    /*\r\n        A avaliação de uma variável será nulo quando:\r\n        0\r\n        null\r\n        undefined\r\n    */\r\n"]}