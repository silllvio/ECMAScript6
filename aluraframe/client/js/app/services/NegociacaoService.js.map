{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","get","then","console","log","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","erro","Error","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","negociacao","ConnectionFactory","getConnection","NegociacaoDao","conexao","dao","add","findAll","delete","mensagem","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["\nclass NegociacaoService {\n\n    constructor() {\n\n        this._http = new HttpService();\n    }\n\n    obterNegociacoesDaSemana() {\n\n        return this._http\n            .get('negociacoes/semana')\n            .then(negociacoes => {\n                console.log(negociacoes);\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana');\n            });\n    }\n\n    obterNegociacoesDaSemanaAnterior() {\n\n        return this._http\n            .get('negociacoes/anterior')\n            .then(negociacoes => {\n                console.log(negociacoes);\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana anterior');\n            });\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n\n        return this._http\n            .get('negociacoes/retrasada')\n            .then(negociacoes => {\n                console.log(negociacoes);\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana retrasada');\n            });\n\n    }\n\n    obterNegociacoes() {\n\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), [])\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor));\n\n            return negociacoes;\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n    }\n\n    cadastra(negociacao) {\n\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.add(negociacao))\n            .then(() => 'Negociação cadastrada com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(\"Não foi possível adicionar a negociação\")\n            });\n    }\n\n\n    findAll() {\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.findAll())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(\"Não foi possível encontrar as negociações.\")\n            });\n    }\n\n    delete() {\n\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.delete())\n            .then(mensagem => mensagem)\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível apagar as negociações.')\n            })\n    }\n\n    importa(listaAtual) {\n\n        return this.obterNegociacoes()\n            .then(negociacoes =>\n                negociacoes.filter(negociacao =>\n                    !listaAtual.some(negociacaoExistente =>\n                        negociacao.isEquals(negociacaoExistente)))\n            )\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível buscar negociações para importar');\n            })\n    }\n}\n"]}